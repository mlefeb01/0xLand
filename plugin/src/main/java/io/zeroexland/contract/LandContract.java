package io.zeroexland.contract;

import io.reactivex.Flowable;
import io.reactivex.functions.Function;
import java.math.BigInteger;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.HashMap;
import java.util.List;
import org.web3j.abi.EventEncoder;
import org.web3j.abi.TypeReference;
import org.web3j.abi.datatypes.Address;
import org.web3j.abi.datatypes.Bool;
import org.web3j.abi.datatypes.Event;
import org.web3j.abi.datatypes.StaticStruct;
import org.web3j.abi.datatypes.Type;
import org.web3j.abi.datatypes.Utf8String;
import org.web3j.abi.datatypes.generated.Int128;
import org.web3j.abi.datatypes.generated.Uint256;
import org.web3j.crypto.Credentials;
import org.web3j.protocol.Web3j;
import org.web3j.protocol.core.DefaultBlockParameter;
import org.web3j.protocol.core.RemoteCall;
import org.web3j.protocol.core.RemoteFunctionCall;
import org.web3j.protocol.core.methods.request.EthFilter;
import org.web3j.protocol.core.methods.response.BaseEventResponse;
import org.web3j.protocol.core.methods.response.Log;
import org.web3j.protocol.core.methods.response.TransactionReceipt;
import org.web3j.tx.Contract;
import org.web3j.tx.TransactionManager;
import org.web3j.tx.gas.ContractGasProvider;

/**
 * <p>Auto generated code.
 * <p><strong>Do not modify!</strong>
 * <p>Please use the <a href="https://docs.web3j.io/command_line.html">web3j command line tools</a>,
 * or the org.web3j.codegen.SolidityFunctionWrapperGenerator in the
 * <a href="https://github.com/web3j/web3j/tree/master/codegen">codegen module</a> to update.
 *
 * <p>Generated with web3j version 1.4.1.
 */
@SuppressWarnings("rawtypes")
public class LandContract extends Contract {
    public static final String BINARY = "0x60806040523480156200001157600080fd5b506040518060400160405280600681526020017f30784c616e6400000000000000000000000000000000000000000000000000008152506040518060400160405280600681526020017f30584c414e44000000000000000000000000000000000000000000000000000081525081600490816200008f919062000324565b508060059081620000a1919062000324565b5050506200040b565b600081519050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b600060028204905060018216806200012c57607f821691505b602082108103620001425762000141620000e4565b5b50919050565b60008190508160005260206000209050919050565b60006020601f8301049050919050565b600082821b905092915050565b600060088302620001ac7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff826200016d565b620001b886836200016d565b95508019841693508086168417925050509392505050565b6000819050919050565b6000819050919050565b600062000205620001ff620001f984620001d0565b620001da565b620001d0565b9050919050565b6000819050919050565b6200022183620001e4565b6200023962000230826200020c565b8484546200017a565b825550505050565b600090565b6200025062000241565b6200025d81848462000216565b505050565b5b8181101562000285576200027960008262000246565b60018101905062000263565b5050565b601f821115620002d4576200029e8162000148565b620002a9846200015d565b81016020851015620002b9578190505b620002d1620002c8856200015d565b83018262000262565b50505b505050565b600082821c905092915050565b6000620002f960001984600802620002d9565b1980831691505092915050565b6000620003148383620002e6565b9150826002028217905092915050565b6200032f82620000aa565b67ffffffffffffffff8111156200034b576200034a620000b5565b5b62000357825462000113565b6200036482828562000289565b600060209050601f8311600181146200039c576000841562000387578287015190505b62000393858262000306565b86555062000403565b601f198416620003ac8662000148565b60005b82811015620003d657848901518255600182019150602085019450602081019050620003af565b86831015620003f65784890151620003f2601f891682620002e6565b8355505b6001600288020188555050505b505050505050565b613907806200041b6000396000f3fe608060405234801561001057600080fd5b50600436106101215760003560e01c80634f6ccce7116100ad578063b62a121f11610071578063b62a121f14610340578063b88d4fde14610370578063c87b56dd1461038c578063e182bfa0146103bc578063e985e9c5146103d857610121565b80634f6ccce7146102765780636352211e146102a657806370a08231146102d657806395d89b4114610306578063a22cb4651461032457610121565b806318160ddd116100f457806318160ddd146101c057806323b872dd146101de5780632f745c59146101fa57806342842e0e1461022a5780634f558e791461024657610121565b806301ffc9a71461012657806306fdde0314610156578063081812fc14610174578063095ea7b3146101a4575b600080fd5b610140600480360381019061013b9190612038565b610408565b60405161014d9190612080565b60405180910390f35b61015e6104ca565b60405161016b9190612134565b60405180910390f35b61018e6004803603810190610189919061218c565b61055c565b60405161019b91906121fa565b60405180910390f35b6101be60048036038101906101b99190612241565b61063a565b005b6101c86108db565b6040516101d59190612290565b60405180910390f35b6101f860048036038101906101f391906122ab565b6108e5565b005b610214600480360381019061020f9190612241565b610d62565b6040516102219190612290565b60405180910390f35b610244600480360381019061023f91906122ab565b610ef4565b005b610260600480360381019061025b919061218c565b610f14565b60405161026d9190612080565b60405180910390f35b610290600480360381019061028b919061218c565b610f80565b60405161029d9190612290565b60405180910390f35b6102c060048036038101906102bb919061218c565b610ff1565b6040516102cd91906121fa565b60405180910390f35b6102f060048036038101906102eb91906122fe565b6110a2565b6040516102fd9190612290565b60405180910390f35b61030e611158565b60405161031b9190612134565b60405180910390f35b61033e60048036038101906103399190612357565b6111ea565b005b61035a6004803603810190610355919061218c565b61145d565b60405161036791906123e2565b60405180910390f35b61038a60048036038101906103859190612532565b61150c565b005b6103a660048036038101906103a1919061218c565b611665565b6040516103b39190612134565b60405180910390f35b6103d660048036038101906103d191906125e1565b61178d565b005b6103f260048036038101906103ed9190612621565b611945565b6040516103ff9190612080565b60405180910390f35b60006301ffc9a760e01b827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916148061046357506380ac58cd60e01b827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916145b806104935750635b5e139f60e01b827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916145b806104c3575063780e9d6360e01b827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916145b9050919050565b6060600480546104d990612690565b80601f016020809104026020016040519081016040528092919081815260200182805461050590612690565b80156105525780601f1061052757610100808354040283529160200191610552565b820191906000526020600020905b81548152906001019060200180831161053557829003601f168201915b5050505050905090565b60008073ffffffffffffffffffffffffffffffffffffffff166001600084815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16036105ff576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016105f69061270d565b60405180910390fd5b6002600083815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b61064381610f14565b610682576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161067990612779565b60405180910390fd5b60006001600083815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690508073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16148061077a5750600360008273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff165b6107b9576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016107b0906127e5565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1603610828576002600083815260200190815260200160002060006101000a81549073ffffffffffffffffffffffffffffffffffffffff021916905561087b565b826002600084815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505b818373ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92560405160405180910390a4505050565b6000600654905090565b60006001600083815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff160361098c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161098390612851565b60405180910390fd5b8073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161480610a4c5750600360008273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff165b80610ab557503373ffffffffffffffffffffffffffffffffffffffff166002600084815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16145b610af4576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610aeb906128bd565b60405180910390fd5b8073ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff1614610b62576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610b5990612929565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1603610bd1576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610bc890612995565b60405180910390fd5b6000808573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000815480929190610c20906129e4565b91905055506000808473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000815480929190610c7490612a0d565b9190505550826001600084815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506002600083815260200190815260200160002060006101000a81549073ffffffffffffffffffffffffffffffffffffffff0219169055818373ffffffffffffffffffffffffffffffffffffffff168573ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef60405160405180910390a450505050565b60008073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1603610dd2576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610dc990612aa1565b60405180910390fd5b610ddb836110a2565b8210610e1c576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610e1390612b33565b60405180910390fd5b6000610e266108db565b90506000805b82811015610eea5760016000610e4183610f80565b815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168673ffffffffffffffffffffffffffffffffffffffff1603610eb1578180610ead90612a0d565b9250505b84600183610ebf9190612b53565b03610ed757610ecd81610f80565b9350505050610eee565b8080610ee290612a0d565b915050610e2c565b5050505b92915050565b610f0f8383836040518060200160405280600081525061150c565b505050565b60008073ffffffffffffffffffffffffffffffffffffffff166001600084815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614159050919050565b6000610f8a6108db565b8210610fcb576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610fc290612bd3565b60405180910390fd5b60078281548110610fdf57610fde612bf3565b5b90600052602060002001549050919050565b6000806001600084815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1603611099576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161109090612851565b60405180910390fd5b80915050919050565b60008073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1603611112576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161110990612c6e565b60405180910390fd5b6000808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b60606005805461116790612690565b80601f016020809104026020016040519081016040528092919081815260200182805461119390612690565b80156111e05780601f106111b5576101008083540402835291602001916111e0565b820191906000526020600020905b8154815290600101906020018083116111c357829003601f168201915b5050505050905090565b8173ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1603611258576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161124f90612cda565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16036112c7576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016112be90612d46565b60405180910390fd5b8015611367576001600360003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055506113f4565b600360003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81549060ff02191690555b8173ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31836040516114519190612080565b60405180910390a35050565b611465611fac565b61146e82610f14565b6114ad576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016114a490612779565b60405180910390fd5b600860008381526020019081526020016000206040518060400160405290816000820160009054906101000a9004600f0b600f0b600f0b81526020016000820160109054906101000a9004600f0b600f0b600f0b815250509050919050565b6115178484846108e5565b60008373ffffffffffffffffffffffffffffffffffffffff163b111561165f5760008373ffffffffffffffffffffffffffffffffffffffff1663150b7a02338786866040518563ffffffff1660e01b81526004016115789493929190612dbb565b6020604051808303816000875af1158015611597573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906115bb9190612e1c565b90507f150b7a023d4804d13e8c85fb27262cb750cf6ba9f9dd3bb30d90f482ceeb4b1f7bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916817bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19161461165d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161165490612e95565b60405180910390fd5b505b50505050565b606061167082610f14565b6116af576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016116a690612f01565b60405180910390fd5b600060086000848152602001908152602001600020905060006116e28260000160009054906101000a9004600f0b6119d9565b6040516020016116f29190612ff5565b60405160208183030381529060405261171b8360000160109054906101000a9004600f0b6119d9565b60405160200161172b91906130ba565b60405160208183030381529060405260405160200161174b929190613311565b604051602081830303815290604052905061176581611a92565b60405160200161177591906133ce565b60405160208183030381529060405292505050919050565b600081600f0b608084600f0b901b1790506009600082815260200190815260200160002060009054906101000a900460ff16156117ff576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016117f690613462565b60405180910390fd5b6000600161180b6108db565b6118159190613482565b9050604051806040016040528085600f0b815260200184600f0b8152506008600083815260200190815260200160002060008201518160000160006101000a8154816fffffffffffffffffffffffffffffffff0219169083600f0b6fffffffffffffffffffffffffffffffff16021790555060208201518160000160106101000a8154816fffffffffffffffffffffffffffffffff0219169083600f0b6fffffffffffffffffffffffffffffffff16021790555090505060016009600084815260200190815260200160002060006101000a81548160ff0219169083151502179055506119023382611bf5565b7f09ca572b404ef133a27b373f04be314b21963319b0b3aaf732c002a9238aec648185853360405161193794939291906134e7565b60405180910390a150505050565b6000600360008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16905092915050565b606060008083600f0b12905060008084600f0b126119f75783611a24565b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff84611a23919061352c565b5b600f0b90508115611a6057611a3881611e4c565b604051602001611a48919061366f565b60405160208183030381529060405292505050611a8d565b611a6981611e4c565b604051602001611a799190613691565b604051602081830303815290604052925050505b919050565b60606000825103611ab457604051806020016040528060008152509050611bf0565b60006040518060600160405280604081526020016138926040913990506000600360028551611ae39190613482565b611aed91906136d7565b6004611af99190613708565b67ffffffffffffffff811115611b1257611b11612407565b5b6040519080825280601f01601f191660200182016040528015611b445781602001600182028036833780820191505090505b509050600182016020820185865187015b80821015611bb0576003820191508151603f8160121c168501518453600184019350603f81600c1c168501518453600184019350603f8160061c168501518453600184019350603f8116850151845360018401935050611b55565b5050600386510660018114611bcc5760028114611bdf57611be7565b603d6001830353603d6002830353611be7565b603d60018303535b50505080925050505b919050565b8173ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614611c63576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611c5a906137ae565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff166001600083815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614611d05576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611cfc90613840565b60405180910390fd5b6000808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000815480929190611d5490612a0d565b9190505550816001600083815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060066000815480929190611dbe90612a0d565b91905055506007819080600181540180825580915050600190039060005260206000200160009091909190915055808273ffffffffffffffffffffffffffffffffffffffff16600073ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef60405160405180910390a45050565b606060008203611e93576040518060400160405280600181526020017f30000000000000000000000000000000000000000000000000000000000000008152509050611fa7565b600082905060005b60008214611ec5578080611eae90612a0d565b915050600a82611ebe91906136d7565b9150611e9b565b60008167ffffffffffffffff811115611ee157611ee0612407565b5b6040519080825280601f01601f191660200182016040528015611f135781602001600182028036833780820191505090505b5090505b60008514611fa057600182611f2c9190612b53565b9150600a85611f3b9190613860565b6030611f479190613482565b60f81b818381518110611f5d57611f5c612bf3565b5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a905350600a85611f9991906136d7565b9450611f17565b8093505050505b919050565b60405180604001604052806000600f0b81526020016000600f0b81525090565b6000604051905090565b600080fd5b600080fd5b60007fffffffff0000000000000000000000000000000000000000000000000000000082169050919050565b61201581611fe0565b811461202057600080fd5b50565b6000813590506120328161200c565b92915050565b60006020828403121561204e5761204d611fd6565b5b600061205c84828501612023565b91505092915050565b60008115159050919050565b61207a81612065565b82525050565b60006020820190506120956000830184612071565b92915050565b600081519050919050565b600082825260208201905092915050565b60005b838110156120d55780820151818401526020810190506120ba565b838111156120e4576000848401525b50505050565b6000601f19601f8301169050919050565b60006121068261209b565b61211081856120a6565b93506121208185602086016120b7565b612129816120ea565b840191505092915050565b6000602082019050818103600083015261214e81846120fb565b905092915050565b6000819050919050565b61216981612156565b811461217457600080fd5b50565b60008135905061218681612160565b92915050565b6000602082840312156121a2576121a1611fd6565b5b60006121b084828501612177565b91505092915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006121e4826121b9565b9050919050565b6121f4816121d9565b82525050565b600060208201905061220f60008301846121eb565b92915050565b61221e816121d9565b811461222957600080fd5b50565b60008135905061223b81612215565b92915050565b6000806040838503121561225857612257611fd6565b5b60006122668582860161222c565b925050602061227785828601612177565b9150509250929050565b61228a81612156565b82525050565b60006020820190506122a56000830184612281565b92915050565b6000806000606084860312156122c4576122c3611fd6565b5b60006122d28682870161222c565b93505060206122e38682870161222c565b92505060406122f486828701612177565b9150509250925092565b60006020828403121561231457612313611fd6565b5b60006123228482850161222c565b91505092915050565b61233481612065565b811461233f57600080fd5b50565b6000813590506123518161232b565b92915050565b6000806040838503121561236e5761236d611fd6565b5b600061237c8582860161222c565b925050602061238d85828601612342565b9150509250929050565b600081600f0b9050919050565b6123ad81612397565b82525050565b6040820160008201516123c960008501826123a4565b5060208201516123dc60208501826123a4565b50505050565b60006040820190506123f760008301846123b3565b92915050565b600080fd5b600080fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b61243f826120ea565b810181811067ffffffffffffffff8211171561245e5761245d612407565b5b80604052505050565b6000612471611fcc565b905061247d8282612436565b919050565b600067ffffffffffffffff82111561249d5761249c612407565b5b6124a6826120ea565b9050602081019050919050565b82818337600083830152505050565b60006124d56124d084612482565b612467565b9050828152602081018484840111156124f1576124f0612402565b5b6124fc8482856124b3565b509392505050565b600082601f830112612519576125186123fd565b5b81356125298482602086016124c2565b91505092915050565b6000806000806080858703121561254c5761254b611fd6565b5b600061255a8782880161222c565b945050602061256b8782880161222c565b935050604061257c87828801612177565b925050606085013567ffffffffffffffff81111561259d5761259c611fdb565b5b6125a987828801612504565b91505092959194509250565b6125be81612397565b81146125c957600080fd5b50565b6000813590506125db816125b5565b92915050565b600080604083850312156125f8576125f7611fd6565b5b6000612606858286016125cc565b9250506020612617858286016125cc565b9150509250929050565b6000806040838503121561263857612637611fd6565b5b60006126468582860161222c565b92505060206126578582860161222c565b9150509250929050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b600060028204905060018216806126a857607f821691505b6020821081036126bb576126ba612661565b5b50919050565b7f546f6b656e204964206e6f742076616c69640000000000000000000000000000600082015250565b60006126f76012836120a6565b9150612702826126c1565b602082019050919050565b60006020820190508181036000830152612726816126ea565b9050919050565b7f496e76616c696420746f6b656e49640000000000000000000000000000000000600082015250565b6000612763600f836120a6565b915061276e8261272d565b602082019050919050565b6000602082019050818103600083015261279281612756565b9050919050565b7f596f7520617265206e6f74206f776e6572206f72206f70657261746f72000000600082015250565b60006127cf601d836120a6565b91506127da82612799565b602082019050919050565b600060208201905081810360008301526127fe816127c2565b9050919050565b7f546f6b656e4964206e6f74206d696e7465640000000000000000000000000000600082015250565b600061283b6012836120a6565b915061284682612805565b602082019050919050565b6000602082019050818103600083015261286a8161282e565b9050919050565b7f4e6f207065726d697373696f6e20746f207472616e7366657200000000000000600082015250565b60006128a76019836120a6565b91506128b282612871565b602082019050919050565b600060208201905081810360008301526128d68161289a565b9050919050565b7f46726f6d206973206e6f742063757272656e74206f776e657200000000000000600082015250565b60006129136019836120a6565b915061291e826128dd565b602082019050919050565b6000602082019050818103600083015261294281612906565b9050919050565b7f546f2061646472657373206973207a65726f2061646472657373000000000000600082015250565b600061297f601a836120a6565b915061298a82612949565b602082019050919050565b600060208201905081810360008301526129ae81612972565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b60006129ef82612156565b915060008203612a0257612a016129b5565b5b600182039050919050565b6000612a1882612156565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8203612a4a57612a496129b5565b5b600182019050919050565b7f5a65726f20416472657373000000000000000000000000000000000000000000600082015250565b6000612a8b600b836120a6565b9150612a9682612a55565b602082019050919050565b60006020820190508181036000830152612aba81612a7e565b9050919050565b7f4552433732313a206f776e657220696e646578206f7574206f6620626f756e6460008201527f7300000000000000000000000000000000000000000000000000000000000000602082015250565b6000612b1d6021836120a6565b9150612b2882612ac1565b604082019050919050565b60006020820190508181036000830152612b4c81612b10565b9050919050565b6000612b5e82612156565b9150612b6983612156565b925082821015612b7c57612b7b6129b5565b5b828203905092915050565b7f496e646578206f7574206f6620626f756e647300000000000000000000000000600082015250565b6000612bbd6013836120a6565b9150612bc882612b87565b602082019050919050565b60006020820190508181036000830152612bec81612bb0565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f43616e6e6f74207175657279207a65726f206164647265737300000000000000600082015250565b6000612c586019836120a6565b9150612c6382612c22565b602082019050919050565b60006020820190508181036000830152612c8781612c4b565b9050919050565b7f596f752063616e7420617070726f766520796f757273656c6621000000000000600082015250565b6000612cc4601a836120a6565b9150612ccf82612c8e565b602082019050919050565b60006020820190508181036000830152612cf381612cb7565b9050919050565b7f596f752063616e6e6f7420617070726f7665207a65726f206164647265737300600082015250565b6000612d30601f836120a6565b9150612d3b82612cfa565b602082019050919050565b60006020820190508181036000830152612d5f81612d23565b9050919050565b600081519050919050565b600082825260208201905092915050565b6000612d8d82612d66565b612d978185612d71565b9350612da78185602086016120b7565b612db0816120ea565b840191505092915050565b6000608082019050612dd060008301876121eb565b612ddd60208301866121eb565b612dea6040830185612281565b8181036060830152612dfc8184612d82565b905095945050505050565b600081519050612e168161200c565b92915050565b600060208284031215612e3257612e31611fd6565b5b6000612e4084828501612e07565b91505092915050565b7f494552433732315265636569766572206572726f720000000000000000000000600082015250565b6000612e7f6015836120a6565b9150612e8a82612e49565b602082019050919050565b60006020820190508181036000830152612eae81612e72565b9050919050565b7f496e76616c696420546f6b656e49640000000000000000000000000000000000600082015250565b6000612eeb600f836120a6565b9150612ef682612eb5565b602082019050919050565b60006020820190508181036000830152612f1a81612ede565b9050919050565b600081905092915050565b7f2278223a20220000000000000000000000000000000000000000000000000000600082015250565b6000612f62600683612f21565b9150612f6d82612f2c565b600682019050919050565b6000612f838261209b565b612f8d8185612f21565b9350612f9d8185602086016120b7565b80840191505092915050565b7f222c000000000000000000000000000000000000000000000000000000000000600082015250565b6000612fdf600283612f21565b9150612fea82612fa9565b600282019050919050565b600061300082612f55565b915061300c8284612f78565b915061301782612fd2565b915081905092915050565b7f227a223a20220000000000000000000000000000000000000000000000000000600082015250565b6000613058600683612f21565b915061306382613022565b600682019050919050565b7f2200000000000000000000000000000000000000000000000000000000000000600082015250565b60006130a4600183612f21565b91506130af8261306e565b600182019050919050565b60006130c58261304b565b91506130d18284612f78565b91506130dc82613097565b915081905092915050565b7f7b00000000000000000000000000000000000000000000000000000000000000600082015250565b600061311d600183612f21565b9150613128826130e7565b600182019050919050565b7f226e616d65223a202230784c616e64222c000000000000000000000000000000600082015250565b6000613169601183612f21565b915061317482613133565b601182019050919050565b7f226465736372697074696f6e223a20224f776e657273686970206f662063687560008201527f6e6b222c00000000000000000000000000000000000000000000000000000000602082015250565b60006131db602483612f21565b91506131e68261317f565b602482019050919050565b7f2274797065223a20226f626a656374222c000000000000000000000000000000600082015250565b6000613227601183612f21565b9150613232826131f1565b601182019050919050565b7f2270726f70657274696573223a207b0000000000000000000000000000000000600082015250565b6000613273600f83612f21565b915061327e8261323d565b600f82019050919050565b600081905092915050565b600061329f82612d66565b6132a98185613289565b93506132b98185602086016120b7565b80840191505092915050565b7f7d00000000000000000000000000000000000000000000000000000000000000600082015250565b60006132fb600183612f21565b9150613306826132c5565b600182019050919050565b600061331c82613110565b91506133278261315c565b9150613332826131ce565b915061333d8261321a565b915061334882613266565b91506133548285613294565b91506133608284613294565b915061336b826132ee565b9150613376826132ee565b91508190509392505050565b7f646174613a6170706c69636174696f6e2f6a736f6e3b6261736536342c000000600082015250565b60006133b8601d83612f21565b91506133c382613382565b601d82019050919050565b60006133d9826133ab565b91506133e58284612f78565b915081905092915050565b7f54686973206368756e6b2068617320616c7265616479206265656e20636c616960008201527f6d65642100000000000000000000000000000000000000000000000000000000602082015250565b600061344c6024836120a6565b9150613457826133f0565b604082019050919050565b6000602082019050818103600083015261347b8161343f565b9050919050565b600061348d82612156565b915061349883612156565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff038211156134cd576134cc6129b5565b5b828201905092915050565b6134e181612397565b82525050565b60006080820190506134fc6000830187612281565b61350960208301866134d8565b61351660408301856134d8565b61352360608301846121eb565b95945050505050565b600061353782612397565b915061354283612397565b9250826f7fffffffffffffffffffffffffffffff0482116000841360008413161615613571576135706129b5565b5b817fffffffffffffffffffffffffffffffff8000000000000000000000000000000005831260008412600084131616156135ae576135ad6129b5565b5b827fffffffffffffffffffffffffffffffff8000000000000000000000000000000005821260008413600084121616156135eb576135ea6129b5565b5b826f7fffffffffffffffffffffffffffffff0582126000841260008412161615613618576136176129b5565b5b828202905092915050565b7f2d00000000000000000000000000000000000000000000000000000000000000600082015250565b6000613659600183612f21565b915061366482613623565b600182019050919050565b600061367a8261364c565b91506136868284612f78565b915081905092915050565b600061369d8284612f78565b915081905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b60006136e282612156565b91506136ed83612156565b9250826136fd576136fc6136a8565b5b828204905092915050565b600061371382612156565b915061371e83612156565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0483118215151615613757576137566129b5565b5b828202905092915050565b7f596f752063616e206f6e6c79206d696e7420666f7220796f757273656c662100600082015250565b6000613798601f836120a6565b91506137a382613762565b602082019050919050565b600060208201905081810360008301526137c78161378b565b9050919050565b7f4e46542077697468207468697320746f6b656e494420616c726561647920657860008201527f6973747321000000000000000000000000000000000000000000000000000000602082015250565b600061382a6025836120a6565b9150613835826137ce565b604082019050919050565b600060208201905081810360008301526138598161381d565b9050919050565b600061386b82612156565b915061387683612156565b925082613886576138856136a8565b5b82820690509291505056fe4142434445464748494a4b4c4d4e4f505152535455565758595a6162636465666768696a6b6c6d6e6f707172737475767778797a303132333435363738392b2fa264697066735822122025723f4f9bcc82aa7aac7f95b5a0ae70d83bf11d256f596e1d02c7d30830df9364736f6c634300080f0033";

    public static final String FUNC_APPROVE = "approve";

    public static final String FUNC_BALANCEOF = "balanceOf";

    public static final String FUNC_EXISTS = "exists";

    public static final String FUNC_GETAPPROVED = "getApproved";

    public static final String FUNC_ISAPPROVEDFORALL = "isApprovedForAll";

    public static final String FUNC_NAME = "name";

    public static final String FUNC_OWNEROF = "ownerOf";

    public static final String FUNC_safeTransferFrom = "safeTransferFrom";

    public static final String FUNC_SETAPPROVALFORALL = "setApprovalForAll";

    public static final String FUNC_SUPPORTSINTERFACE = "supportsInterface";

    public static final String FUNC_SYMBOL = "symbol";

    public static final String FUNC_TOKENBYINDEX = "tokenByIndex";

    public static final String FUNC_TOKENOFOWNERBYINDEX = "tokenOfOwnerByIndex";

    public static final String FUNC_TOTALSUPPLY = "totalSupply";

    public static final String FUNC_TRANSFERFROM = "transferFrom";

    public static final String FUNC_CLAIM = "claim";

    public static final String FUNC_TOKENURI = "tokenURI";

    public static final String FUNC_CHUNKBYTOKENID = "chunkByTokenId";

    public static final Event APPROVAL_EVENT = new Event("Approval",
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>(true) {}, new TypeReference<Address>(true) {}, new TypeReference<Uint256>(true) {}));
    ;

    public static final Event APPROVALFORALL_EVENT = new Event("ApprovalForAll",
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>(true) {}, new TypeReference<Address>(true) {}, new TypeReference<Bool>() {}));
    ;

    public static final Event MINT_EVENT = new Event("Mint",
            Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}, new TypeReference<Int128>() {}, new TypeReference<Int128>() {}, new TypeReference<Address>() {}));
    ;

    public static final Event TRANSFER_EVENT = new Event("Transfer",
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>(true) {}, new TypeReference<Address>(true) {}, new TypeReference<Uint256>(true) {}));
    ;

    protected static final HashMap<String, String> _addresses;

    static {
        _addresses = new HashMap<String, String>();
        _addresses.put("5777", "0x2171d9963B9ABEC6BDE6BFF4ab1FB74a7623b283");
    }

    @Deprecated
    protected LandContract(String contractAddress, Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        super(BINARY, contractAddress, web3j, credentials, gasPrice, gasLimit);
    }

    protected LandContract(String contractAddress, Web3j web3j, Credentials credentials, ContractGasProvider contractGasProvider) {
        super(BINARY, contractAddress, web3j, credentials, contractGasProvider);
    }

    @Deprecated
    protected LandContract(String contractAddress, Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        super(BINARY, contractAddress, web3j, transactionManager, gasPrice, gasLimit);
    }

    protected LandContract(String contractAddress, Web3j web3j, TransactionManager transactionManager, ContractGasProvider contractGasProvider) {
        super(BINARY, contractAddress, web3j, transactionManager, contractGasProvider);
    }

    public List<ApprovalEventResponse> getApprovalEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(APPROVAL_EVENT, transactionReceipt);
        ArrayList<ApprovalEventResponse> responses = new ArrayList<ApprovalEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            ApprovalEventResponse typedResponse = new ApprovalEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.owner = (String) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.approved = (String) eventValues.getIndexedValues().get(1).getValue();
            typedResponse.tokenId = (BigInteger) eventValues.getIndexedValues().get(2).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<ApprovalEventResponse> approvalEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new Function<Log, ApprovalEventResponse>() {
            @Override
            public ApprovalEventResponse apply(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(APPROVAL_EVENT, log);
                ApprovalEventResponse typedResponse = new ApprovalEventResponse();
                typedResponse.log = log;
                typedResponse.owner = (String) eventValues.getIndexedValues().get(0).getValue();
                typedResponse.approved = (String) eventValues.getIndexedValues().get(1).getValue();
                typedResponse.tokenId = (BigInteger) eventValues.getIndexedValues().get(2).getValue();
                return typedResponse;
            }
        });
    }

    public Flowable<ApprovalEventResponse> approvalEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(APPROVAL_EVENT));
        return approvalEventFlowable(filter);
    }

    public List<ApprovalForAllEventResponse> getApprovalForAllEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(APPROVALFORALL_EVENT, transactionReceipt);
        ArrayList<ApprovalForAllEventResponse> responses = new ArrayList<ApprovalForAllEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            ApprovalForAllEventResponse typedResponse = new ApprovalForAllEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.owner = (String) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.operator = (String) eventValues.getIndexedValues().get(1).getValue();
            typedResponse.approved = (Boolean) eventValues.getNonIndexedValues().get(0).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<ApprovalForAllEventResponse> approvalForAllEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new Function<Log, ApprovalForAllEventResponse>() {
            @Override
            public ApprovalForAllEventResponse apply(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(APPROVALFORALL_EVENT, log);
                ApprovalForAllEventResponse typedResponse = new ApprovalForAllEventResponse();
                typedResponse.log = log;
                typedResponse.owner = (String) eventValues.getIndexedValues().get(0).getValue();
                typedResponse.operator = (String) eventValues.getIndexedValues().get(1).getValue();
                typedResponse.approved = (Boolean) eventValues.getNonIndexedValues().get(0).getValue();
                return typedResponse;
            }
        });
    }

    public Flowable<ApprovalForAllEventResponse> approvalForAllEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(APPROVALFORALL_EVENT));
        return approvalForAllEventFlowable(filter);
    }

    public List<MintEventResponse> getMintEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(MINT_EVENT, transactionReceipt);
        ArrayList<MintEventResponse> responses = new ArrayList<MintEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            MintEventResponse typedResponse = new MintEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse._tokenId = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse.x = (BigInteger) eventValues.getNonIndexedValues().get(1).getValue();
            typedResponse.z = (BigInteger) eventValues.getNonIndexedValues().get(2).getValue();
            typedResponse.owner = (String) eventValues.getNonIndexedValues().get(3).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<MintEventResponse> mintEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new Function<Log, MintEventResponse>() {
            @Override
            public MintEventResponse apply(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(MINT_EVENT, log);
                MintEventResponse typedResponse = new MintEventResponse();
                typedResponse.log = log;
                typedResponse._tokenId = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
                typedResponse.x = (BigInteger) eventValues.getNonIndexedValues().get(1).getValue();
                typedResponse.z = (BigInteger) eventValues.getNonIndexedValues().get(2).getValue();
                typedResponse.owner = (String) eventValues.getNonIndexedValues().get(3).getValue();
                return typedResponse;
            }
        });
    }

    public Flowable<MintEventResponse> mintEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(MINT_EVENT));
        return mintEventFlowable(filter);
    }

    public List<TransferEventResponse> getTransferEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(TRANSFER_EVENT, transactionReceipt);
        ArrayList<TransferEventResponse> responses = new ArrayList<TransferEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            TransferEventResponse typedResponse = new TransferEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.from = (String) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.to = (String) eventValues.getIndexedValues().get(1).getValue();
            typedResponse.tokenId = (BigInteger) eventValues.getIndexedValues().get(2).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<TransferEventResponse> transferEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new Function<Log, TransferEventResponse>() {
            @Override
            public TransferEventResponse apply(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(TRANSFER_EVENT, log);
                TransferEventResponse typedResponse = new TransferEventResponse();
                typedResponse.log = log;
                typedResponse.from = (String) eventValues.getIndexedValues().get(0).getValue();
                typedResponse.to = (String) eventValues.getIndexedValues().get(1).getValue();
                typedResponse.tokenId = (BigInteger) eventValues.getIndexedValues().get(2).getValue();
                return typedResponse;
            }
        });
    }

    public Flowable<TransferEventResponse> transferEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(TRANSFER_EVENT));
        return transferEventFlowable(filter);
    }

    public RemoteFunctionCall<TransactionReceipt> approve(String _approved, BigInteger _tokenId) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_APPROVE,
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(_approved),
                        new org.web3j.abi.datatypes.generated.Uint256(_tokenId)),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<BigInteger> balanceOf(String _owner) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_BALANCEOF,
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(_owner)),
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteFunctionCall<Boolean> exists(BigInteger _tokenId) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_EXISTS,
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(_tokenId)),
                Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}));
        return executeRemoteCallSingleValueReturn(function, Boolean.class);
    }

    public RemoteFunctionCall<String> getApproved(BigInteger _tokenId) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_GETAPPROVED,
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(_tokenId)),
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteFunctionCall<Boolean> isApprovedForAll(String _owner, String _operator) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_ISAPPROVEDFORALL,
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(_owner),
                        new org.web3j.abi.datatypes.Address(_operator)),
                Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}));
        return executeRemoteCallSingleValueReturn(function, Boolean.class);
    }

    public RemoteFunctionCall<String> name() {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_NAME,
                Arrays.<Type>asList(),
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteFunctionCall<String> ownerOf(BigInteger _tokenId) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_OWNEROF,
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(_tokenId)),
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteFunctionCall<TransactionReceipt> safeTransferFrom(String _from, String _to, BigInteger _tokenId) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_safeTransferFrom,
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(_from),
                        new org.web3j.abi.datatypes.Address(_to),
                        new org.web3j.abi.datatypes.generated.Uint256(_tokenId)),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> safeTransferFrom(String _from, String _to, BigInteger _tokenId, byte[] data) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_safeTransferFrom,
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(_from),
                        new org.web3j.abi.datatypes.Address(_to),
                        new org.web3j.abi.datatypes.generated.Uint256(_tokenId),
                        new org.web3j.abi.datatypes.DynamicBytes(data)),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> setApprovalForAll(String _operator, Boolean _approved) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_SETAPPROVALFORALL,
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(_operator),
                        new org.web3j.abi.datatypes.Bool(_approved)),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<Boolean> supportsInterface(byte[] interfaceId) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_SUPPORTSINTERFACE,
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Bytes4(interfaceId)),
                Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}));
        return executeRemoteCallSingleValueReturn(function, Boolean.class);
    }

    public RemoteFunctionCall<String> symbol() {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_SYMBOL,
                Arrays.<Type>asList(),
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteFunctionCall<BigInteger> tokenByIndex(BigInteger _index) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_TOKENBYINDEX,
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(_index)),
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteFunctionCall<BigInteger> tokenOfOwnerByIndex(String _owner, BigInteger _index) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_TOKENOFOWNERBYINDEX,
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(_owner),
                        new org.web3j.abi.datatypes.generated.Uint256(_index)),
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteFunctionCall<BigInteger> totalSupply() {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_TOTALSUPPLY,
                Arrays.<Type>asList(),
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteFunctionCall<TransactionReceipt> transferFrom(String _from, String _to, BigInteger _tokenId) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_TRANSFERFROM,
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(_from),
                        new org.web3j.abi.datatypes.Address(_to),
                        new org.web3j.abi.datatypes.generated.Uint256(_tokenId)),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> claim(BigInteger x, BigInteger z) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_CLAIM,
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Int128(x),
                        new org.web3j.abi.datatypes.generated.Int128(z)),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<String> tokenURI(BigInteger _tokenId) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_TOKENURI,
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(_tokenId)),
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteFunctionCall<Chunk> chunkByTokenId(BigInteger _tokenId) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_CHUNKBYTOKENID,
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(_tokenId)),
                Arrays.<TypeReference<?>>asList(new TypeReference<Chunk>() {}));
        return executeRemoteCallSingleValueReturn(function, Chunk.class);
    }

    @Deprecated
    public static LandContract load(String contractAddress, Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        return new LandContract(contractAddress, web3j, credentials, gasPrice, gasLimit);
    }

    @Deprecated
    public static LandContract load(String contractAddress, Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        return new LandContract(contractAddress, web3j, transactionManager, gasPrice, gasLimit);
    }

    public static LandContract load(String contractAddress, Web3j web3j, Credentials credentials, ContractGasProvider contractGasProvider) {
        return new LandContract(contractAddress, web3j, credentials, contractGasProvider);
    }

    public static LandContract load(String contractAddress, Web3j web3j, TransactionManager transactionManager, ContractGasProvider contractGasProvider) {
        return new LandContract(contractAddress, web3j, transactionManager, contractGasProvider);
    }

    public static RemoteCall<LandContract> deploy(Web3j web3j, Credentials credentials, ContractGasProvider contractGasProvider) {
        return deployRemoteCall(LandContract.class, web3j, credentials, contractGasProvider, BINARY, "");
    }

    public static RemoteCall<LandContract> deploy(Web3j web3j, TransactionManager transactionManager, ContractGasProvider contractGasProvider) {
        return deployRemoteCall(LandContract.class, web3j, transactionManager, contractGasProvider, BINARY, "");
    }

    @Deprecated
    public static RemoteCall<LandContract> deploy(Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        return deployRemoteCall(LandContract.class, web3j, credentials, gasPrice, gasLimit, BINARY, "");
    }

    @Deprecated
    public static RemoteCall<LandContract> deploy(Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        return deployRemoteCall(LandContract.class, web3j, transactionManager, gasPrice, gasLimit, BINARY, "");
    }

    protected String getStaticDeployedAddress(String networkId) {
        return _addresses.get(networkId);
    }

    public static String getPreviouslyDeployedAddress(String networkId) {
        return _addresses.get(networkId);
    }

    public static class Chunk extends StaticStruct {
        public BigInteger x;

        public BigInteger z;

        public Chunk(BigInteger x, BigInteger z) {
            super(new org.web3j.abi.datatypes.generated.Int128(x),new org.web3j.abi.datatypes.generated.Int128(z));
            this.x = x;
            this.z = z;
        }

        public Chunk(Int128 x, Int128 z) {
            super(x,z);
            this.x = x.getValue();
            this.z = z.getValue();
        }
    }

    public static class ApprovalEventResponse extends BaseEventResponse {
        public String owner;

        public String approved;

        public BigInteger tokenId;
    }

    public static class ApprovalForAllEventResponse extends BaseEventResponse {
        public String owner;

        public String operator;

        public Boolean approved;
    }

    public static class MintEventResponse extends BaseEventResponse {
        public BigInteger _tokenId;

        public BigInteger x;

        public BigInteger z;

        public String owner;
    }

    public static class TransferEventResponse extends BaseEventResponse {
        public String from;

        public String to;

        public BigInteger tokenId;
    }
}